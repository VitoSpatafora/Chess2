
//minimalist structure for undo info
struct Undo {
    uint64_t hash;
    int epSquare;
    uint8_t castlingRights;
    int halfmoveClock;
    chess::Piece capturedPiece;
    chess::Piece movedPiece;   // <-- Add this if you want explicit robustness
    int fullmoveNumber;
};

//undo info stack
std::vector<Undo> undoStack;

//adding undo object to stack before applying move

undoStack.push_back({
    p.currentHash,
    p.epSquare,
    p.castlingRights,
    p.halfmoveClock,
    captured_piece_on_to_sq,
    p.fullmoveNumber
});



//Restore the position after apply move

Undo last = undoStack.back();
undoStack.pop_back();
undo(p, last, from, to, movedPiece, capturedPiece, promoType, moveFlags);









//Actual Undo Method which is called to restore the position
void undo(Position& pos, const Undo& u, int from, int to, chess::Piece movedPiece, chess::Piece capturedPiece, int promoType, int moveFlags) {
    // Undo the move using info in Undo u
    // 1. Move piece back
    // 2. Restore captured piece (if any)
    // 3. Undo promotion (if any)
    // 4. Restore en passant/castling/etc

    pos.whiteToMove = !pos.whiteToMove; // revert turn
    pos.fullmoveNumber = u.fullmoveNumber;
    pos.halfmoveClock  = u.halfmoveClock;
    pos.castlingRights = u.castlingRights;
    pos.epSquare       = u.epSquare;
    pos.currentHash    = u.hash;

    // Undo move itself...
    // (You'll need to implement this in detail, but you have all needed information)
    // This is the inverse of your applyMove logic.

    // Restore mailbox and bitboards accordingly.

    // Example pseudocode: (details depend on how you implement applyMove)
    // - Move piece from 'to' back to 'from'
    // - Restore captured piece at 'to' if capturedPiece != NO_PIECE
    // - If promotion, revert promoted piece to pawn
    // - If castling, move rook back
    // - If en passant, restore captured pawn

    // Then update occupancies:
    pos.updateOccupancies();
}
